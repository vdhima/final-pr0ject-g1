name: Terraform

on:
  push:
    branches:
      - main  # Set this to your main branch name
  pull_request:
    branches:
      - main  # Set this to include your main branch for PRs

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'eu-north-1'  # Your AWS region
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 'latest'  # Specify your Terraform version here

    - name: Setup Terraform Cloud Credentials
      run: echo "credentials \"app.terraform.io\" { token = \"${{ secrets.TF_API_TOKEN }}\" }" > ~/.terraformrc    

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infrastructure

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./infrastructure

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./infrastructure
      if: github.ref == 'refs/heads/main'  # Only apply on the vasil branch

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1  # Replace with your AWS region

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: final-project-g1-ecr-repository-production  # Replace with your ECR repository name
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Set Kubernetes context before deploying
    - name: Set Kubernetes Context
      run: |
        kubectl config use-context $(kubectl config view -o=jsonpath='{.contexts[?(@.name == "api.yaml")].name}')
      working-directory: ./k8s       

    # Deploy to Kubernetes
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v1

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/api app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kubectl rollout status deployment/api

    # Deploy Frontend to S3
    #- name: Deploy Frontend to S3
    #  run: |
    #    aws s3 sync ./web_client s3://your-s3-bucket-name --acl public-read
    #  if: github.ref == 'refs/heads/main'  # Only deploy on the vasil branch
